// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oss_sys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "oss_sys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetWorker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_oss_5fsys_2eproto() {
  protobuf_AddDesc_oss_5fsys_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "oss_sys.proto");
  GOOGLE_CHECK(file != NULL);
  ConfigInfo_descriptor_ = file->message_type(0);
  static const int ConfigInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, file_content_),
  };
  ConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigInfo_descriptor_,
      ConfigInfo::default_instance_,
      ConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigInfo));
  WorkerLoad_descriptor_ = file->message_type(1);
  static const int WorkerLoad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, load_),
  };
  WorkerLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkerLoad_descriptor_,
      WorkerLoad::default_instance_,
      WorkerLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkerLoad));
  ConnectWorker_descriptor_ = file->message_type(2);
  static const int ConnectWorker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectWorker, worker_index_),
  };
  ConnectWorker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectWorker_descriptor_,
      ConnectWorker::default_instance_,
      ConnectWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectWorker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectWorker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectWorker));
  TargetWorker_descriptor_ = file->message_type(3);
  static const int TargetWorker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, worker_identify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, node_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, err_msg_),
  };
  TargetWorker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetWorker_descriptor_,
      TargetWorker::default_instance_,
      TargetWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetWorker));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_oss_5fsys_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigInfo_descriptor_, &ConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkerLoad_descriptor_, &WorkerLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectWorker_descriptor_, &ConnectWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetWorker_descriptor_, &TargetWorker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_oss_5fsys_2eproto() {
  delete ConfigInfo::default_instance_;
  delete ConfigInfo_reflection_;
  delete WorkerLoad::default_instance_;
  delete WorkerLoad_reflection_;
  delete ConnectWorker::default_instance_;
  delete ConnectWorker_reflection_;
  delete TargetWorker::default_instance_;
  delete TargetWorker_reflection_;
}

void protobuf_AddDesc_oss_5fsys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ross_sys.proto\"5\n\nConfigInfo\022\021\n\tfile_na"
    "me\030\001 \002(\t\022\024\n\014file_content\030\002 \002(\t\"\'\n\nWorker"
    "Load\022\013\n\003pid\030\001 \002(\005\022\014\n\004load\030\002 \002(\005\"%\n\rConne"
    "ctWorker\022\024\n\014worker_index\030\001 \002(\005\"[\n\014Target"
    "Worker\022\016\n\006err_no\030\001 \002(\005\022\027\n\017worker_identif"
    "y\030\002 \002(\t\022\021\n\tnode_type\030\003 \002(\t\022\017\n\007err_msg\030\004 "
    "\001(\t", 243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "oss_sys.proto", &protobuf_RegisterTypes);
  ConfigInfo::default_instance_ = new ConfigInfo();
  WorkerLoad::default_instance_ = new WorkerLoad();
  ConnectWorker::default_instance_ = new ConnectWorker();
  TargetWorker::default_instance_ = new TargetWorker();
  ConfigInfo::default_instance_->InitAsDefaultInstance();
  WorkerLoad::default_instance_->InitAsDefaultInstance();
  ConnectWorker::default_instance_->InitAsDefaultInstance();
  TargetWorker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_oss_5fsys_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_oss_5fsys_2eproto {
  StaticDescriptorInitializer_oss_5fsys_2eproto() {
    protobuf_AddDesc_oss_5fsys_2eproto();
  }
} static_descriptor_initializer_oss_5fsys_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ConfigInfo::kFileNameFieldNumber;
const int ConfigInfo::kFileContentFieldNumber;
#endif  // !_MSC_VER

ConfigInfo::ConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigInfo)
}

void ConfigInfo::InitAsDefaultInstance() {
}

ConfigInfo::ConfigInfo(const ConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigInfo)
}

void ConfigInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigInfo::~ConfigInfo() {
  // @@protoc_insertion_point(destructor:ConfigInfo)
  SharedDtor();
}

void ConfigInfo::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_content_;
  }
  if (this != default_instance_) {
  }
}

void ConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigInfo_descriptor_;
}

const ConfigInfo& ConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_5fsys_2eproto();
  return *default_instance_;
}

ConfigInfo* ConfigInfo::default_instance_ = NULL;

ConfigInfo* ConfigInfo::New() const {
  return new ConfigInfo;
}

void ConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    if (has_file_content()) {
      if (file_content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_content;
        break;
      }

      // required string file_content = 2;
      case 2: {
        if (tag == 18) {
         parse_file_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_content().data(), this->file_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigInfo)
  return false;
#undef DO_
}

void ConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigInfo)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // required string file_content = 2;
  if (has_file_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_content().data(), this->file_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigInfo)
}

::google::protobuf::uint8* ConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigInfo)
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // required string file_content = 2;
  if (has_file_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_content().data(), this->file_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigInfo)
  return target;
}

int ConfigInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // required string file_content = 2;
    if (has_file_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigInfo::MergeFrom(const ConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_file_content()) {
      set_file_content(from.file_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigInfo::CopyFrom(const ConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConfigInfo::Swap(ConfigInfo* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(file_content_, other->file_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigInfo_descriptor_;
  metadata.reflection = ConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkerLoad::kPidFieldNumber;
const int WorkerLoad::kLoadFieldNumber;
#endif  // !_MSC_VER

WorkerLoad::WorkerLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorkerLoad)
}

void WorkerLoad::InitAsDefaultInstance() {
}

WorkerLoad::WorkerLoad(const WorkerLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorkerLoad)
}

void WorkerLoad::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  load_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkerLoad::~WorkerLoad() {
  // @@protoc_insertion_point(destructor:WorkerLoad)
  SharedDtor();
}

void WorkerLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerLoad_descriptor_;
}

const WorkerLoad& WorkerLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_5fsys_2eproto();
  return *default_instance_;
}

WorkerLoad* WorkerLoad::default_instance_ = NULL;

WorkerLoad* WorkerLoad::New() const {
  return new WorkerLoad;
}

void WorkerLoad::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorkerLoad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pid_, load_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkerLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorkerLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_load;
        break;
      }

      // required int32 load = 2;
      case 2: {
        if (tag == 16) {
         parse_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorkerLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorkerLoad)
  return false;
#undef DO_
}

void WorkerLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorkerLoad)
  // required int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // required int32 load = 2;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->load(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorkerLoad)
}

::google::protobuf::uint8* WorkerLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorkerLoad)
  // required int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // required int32 load = 2;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->load(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorkerLoad)
  return target;
}

int WorkerLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // required int32 load = 2;
    if (has_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->load());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkerLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkerLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkerLoad::MergeFrom(const WorkerLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_load()) {
      set_load(from.load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkerLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerLoad::CopyFrom(const WorkerLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerLoad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WorkerLoad::Swap(WorkerLoad* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(load_, other->load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkerLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerLoad_descriptor_;
  metadata.reflection = WorkerLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectWorker::kWorkerIndexFieldNumber;
#endif  // !_MSC_VER

ConnectWorker::ConnectWorker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectWorker)
}

void ConnectWorker::InitAsDefaultInstance() {
}

ConnectWorker::ConnectWorker(const ConnectWorker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnectWorker)
}

void ConnectWorker::SharedCtor() {
  _cached_size_ = 0;
  worker_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectWorker::~ConnectWorker() {
  // @@protoc_insertion_point(destructor:ConnectWorker)
  SharedDtor();
}

void ConnectWorker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectWorker_descriptor_;
}

const ConnectWorker& ConnectWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_5fsys_2eproto();
  return *default_instance_;
}

ConnectWorker* ConnectWorker::default_instance_ = NULL;

ConnectWorker* ConnectWorker::New() const {
  return new ConnectWorker;
}

void ConnectWorker::Clear() {
  worker_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnectWorker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 worker_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_index_)));
          set_has_worker_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnectWorker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnectWorker)
  return false;
#undef DO_
}

void ConnectWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnectWorker)
  // required int32 worker_index = 1;
  if (has_worker_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->worker_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnectWorker)
}

::google::protobuf::uint8* ConnectWorker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectWorker)
  // required int32 worker_index = 1;
  if (has_worker_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->worker_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectWorker)
  return target;
}

int ConnectWorker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 worker_index = 1;
    if (has_worker_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectWorker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectWorker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectWorker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectWorker::MergeFrom(const ConnectWorker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worker_index()) {
      set_worker_index(from.worker_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectWorker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectWorker::CopyFrom(const ConnectWorker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectWorker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConnectWorker::Swap(ConnectWorker* other) {
  if (other != this) {
    std::swap(worker_index_, other->worker_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectWorker_descriptor_;
  metadata.reflection = ConnectWorker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetWorker::kErrNoFieldNumber;
const int TargetWorker::kWorkerIdentifyFieldNumber;
const int TargetWorker::kNodeTypeFieldNumber;
const int TargetWorker::kErrMsgFieldNumber;
#endif  // !_MSC_VER

TargetWorker::TargetWorker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TargetWorker)
}

void TargetWorker::InitAsDefaultInstance() {
}

TargetWorker::TargetWorker(const TargetWorker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TargetWorker)
}

void TargetWorker::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  err_no_ = 0;
  worker_identify_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetWorker::~TargetWorker() {
  // @@protoc_insertion_point(destructor:TargetWorker)
  SharedDtor();
}

void TargetWorker::SharedDtor() {
  if (worker_identify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete worker_identify_;
  }
  if (node_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_type_;
  }
  if (err_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete err_msg_;
  }
  if (this != default_instance_) {
  }
}

void TargetWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetWorker_descriptor_;
}

const TargetWorker& TargetWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_oss_5fsys_2eproto();
  return *default_instance_;
}

TargetWorker* TargetWorker::default_instance_ = NULL;

TargetWorker* TargetWorker::New() const {
  return new TargetWorker;
}

void TargetWorker::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    err_no_ = 0;
    if (has_worker_identify()) {
      if (worker_identify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        worker_identify_->clear();
      }
    }
    if (has_node_type()) {
      if (node_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_type_->clear();
      }
    }
    if (has_err_msg()) {
      if (err_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        err_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TargetWorker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));
          set_has_err_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_worker_identify;
        break;
      }

      // required string worker_identify = 2;
      case 2: {
        if (tag == 18) {
         parse_worker_identify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_identify()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->worker_identify().data(), this->worker_identify().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "worker_identify");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_type;
        break;
      }

      // required string node_type = 3;
      case 3: {
        if (tag == 26) {
         parse_node_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_type().data(), this->node_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "err_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TargetWorker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TargetWorker)
  return false;
#undef DO_
}

void TargetWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TargetWorker)
  // required int32 err_no = 1;
  if (has_err_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // required string worker_identify = 2;
  if (has_worker_identify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->worker_identify().data(), this->worker_identify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worker_identify");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->worker_identify(), output);
  }

  // required string node_type = 3;
  if (has_node_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_type().data(), this->node_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_type(), output);
  }

  // optional string err_msg = 4;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "err_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->err_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TargetWorker)
}

::google::protobuf::uint8* TargetWorker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TargetWorker)
  // required int32 err_no = 1;
  if (has_err_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // required string worker_identify = 2;
  if (has_worker_identify()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->worker_identify().data(), this->worker_identify().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worker_identify");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->worker_identify(), target);
  }

  // required string node_type = 3;
  if (has_node_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_type().data(), this->node_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_type(), target);
  }

  // optional string err_msg = 4;
  if (has_err_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "err_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TargetWorker)
  return target;
}

int TargetWorker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_no = 1;
    if (has_err_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_no());
    }

    // required string worker_identify = 2;
    if (has_worker_identify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->worker_identify());
    }

    // required string node_type = 3;
    if (has_node_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_type());
    }

    // optional string err_msg = 4;
    if (has_err_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetWorker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetWorker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetWorker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetWorker::MergeFrom(const TargetWorker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_no()) {
      set_err_no(from.err_no());
    }
    if (from.has_worker_identify()) {
      set_worker_identify(from.worker_identify());
    }
    if (from.has_node_type()) {
      set_node_type(from.node_type());
    }
    if (from.has_err_msg()) {
      set_err_msg(from.err_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetWorker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetWorker::CopyFrom(const TargetWorker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetWorker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TargetWorker::Swap(TargetWorker* other) {
  if (other != this) {
    std::swap(err_no_, other->err_no_);
    std::swap(worker_identify_, other->worker_identify_);
    std::swap(node_type_, other->node_type_);
    std::swap(err_msg_, other->err_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetWorker_descriptor_;
  metadata.reflection = TargetWorker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
