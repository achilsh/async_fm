// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HttpMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpMsg_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpMsg_Header_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_http_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_http_2eproto() {
  protobuf_AddDesc_http_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "http.proto");
  GOOGLE_CHECK(file != NULL);
  HttpMsg_descriptor_ = file->message_type(0);
  static const int HttpMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, http_major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, http_minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, content_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, status_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, is_decoding_),
  };
  HttpMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpMsg_descriptor_,
      HttpMsg::default_instance_,
      HttpMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(HttpMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg, _internal_metadata_),
      -1);
  HttpMsg_Header_descriptor_ = HttpMsg_descriptor_->nested_type(0);
  static const int HttpMsg_Header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg_Header, header_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg_Header, header_value_),
  };
  HttpMsg_Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HttpMsg_Header_descriptor_,
      HttpMsg_Header::default_instance_,
      HttpMsg_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg_Header, _has_bits_[0]),
      -1,
      -1,
      sizeof(HttpMsg_Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpMsg_Header, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_http_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpMsg_descriptor_, &HttpMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HttpMsg_Header_descriptor_, &HttpMsg_Header::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_http_2eproto() {
  delete HttpMsg::default_instance_;
  delete HttpMsg_reflection_;
  delete HttpMsg_Header::default_instance_;
  delete HttpMsg_Header_reflection_;
}

void protobuf_AddDesc_http_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_http_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhttp.proto\"\243\002\n\007HttpMsg\022\014\n\004type\030\001 \002(\005\022\022"
    "\n\nhttp_major\030\002 \002(\005\022\022\n\nhttp_minor\030\003 \002(\005\022\026"
    "\n\016content_length\030\004 \001(\005\022\016\n\006method\030\005 \001(\005\022\023"
    "\n\013status_code\030\006 \001(\005\022\020\n\010encoding\030\007 \001(\005\022\013\n"
    "\003url\030\010 \001(\t\022 \n\007headers\030\t \003(\0132\017.HttpMsg.He"
    "ader\022\014\n\004body\030\n \001(\014\022\014\n\004path\030\016 \001(\t\022\023\n\013is_d"
    "ecoding\030\017 \001(\010\0323\n\006Header\022\023\n\013header_name\030\001"
    " \002(\t\022\024\n\014header_value\030\002 \002(\t", 306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http.proto", &protobuf_RegisterTypes);
  HttpMsg::default_instance_ = new HttpMsg();
  HttpMsg_Header::default_instance_ = new HttpMsg_Header();
  HttpMsg::default_instance_->InitAsDefaultInstance();
  HttpMsg_Header::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_http_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_http_2eproto {
  StaticDescriptorInitializer_http_2eproto() {
    protobuf_AddDesc_http_2eproto();
  }
} static_descriptor_initializer_http_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpMsg_Header::kHeaderNameFieldNumber;
const int HttpMsg_Header::kHeaderValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpMsg_Header::HttpMsg_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HttpMsg.Header)
}

void HttpMsg_Header::InitAsDefaultInstance() {
}

HttpMsg_Header::HttpMsg_Header(const HttpMsg_Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HttpMsg.Header)
}

void HttpMsg_Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpMsg_Header::~HttpMsg_Header() {
  // @@protoc_insertion_point(destructor:HttpMsg.Header)
  SharedDtor();
}

void HttpMsg_Header::SharedDtor() {
  header_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HttpMsg_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpMsg_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpMsg_Header_descriptor_;
}

const HttpMsg_Header& HttpMsg_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpMsg_Header* HttpMsg_Header::default_instance_ = NULL;

HttpMsg_Header* HttpMsg_Header::New(::google::protobuf::Arena* arena) const {
  HttpMsg_Header* n = new HttpMsg_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpMsg_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg.Header)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header_name()) {
      header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_header_value()) {
      header_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HttpMsg_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HttpMsg.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string header_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header_name().data(), this->header_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpMsg.Header.header_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_header_value;
        break;
      }

      // required string header_value = 2;
      case 2: {
        if (tag == 18) {
         parse_header_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header_value().data(), this->header_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpMsg.Header.header_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HttpMsg.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HttpMsg.Header)
  return false;
#undef DO_
}

void HttpMsg_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HttpMsg.Header)
  // required string header_name = 1;
  if (has_header_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_name().data(), this->header_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.Header.header_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header_name(), output);
  }

  // required string header_value = 2;
  if (has_header_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_value().data(), this->header_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.Header.header_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->header_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HttpMsg.Header)
}

::google::protobuf::uint8* HttpMsg_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg.Header)
  // required string header_name = 1;
  if (has_header_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_name().data(), this->header_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.Header.header_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header_name(), target);
  }

  // required string header_value = 2;
  if (has_header_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header_value().data(), this->header_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.Header.header_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->header_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg.Header)
  return target;
}

int HttpMsg_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HttpMsg.Header)
  int total_size = 0;

  if (has_header_name()) {
    // required string header_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_name());
  }

  if (has_header_value()) {
    // required string header_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_value());
  }

  return total_size;
}
int HttpMsg_Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg.Header)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string header_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_name());

    // required string header_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header_value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpMsg_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HttpMsg_Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpMsg_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg.Header)
    MergeFrom(*source);
  }
}

void HttpMsg_Header::MergeFrom(const HttpMsg_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header_name()) {
      set_has_header_name();
      header_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_name_);
    }
    if (from.has_header_value()) {
      set_has_header_value();
      header_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HttpMsg_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg_Header::CopyFrom(const HttpMsg_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HttpMsg_Header::Swap(HttpMsg_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpMsg_Header::InternalSwap(HttpMsg_Header* other) {
  header_name_.Swap(&other->header_name_);
  header_value_.Swap(&other->header_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpMsg_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpMsg_Header_descriptor_;
  metadata.reflection = HttpMsg_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpMsg::kTypeFieldNumber;
const int HttpMsg::kHttpMajorFieldNumber;
const int HttpMsg::kHttpMinorFieldNumber;
const int HttpMsg::kContentLengthFieldNumber;
const int HttpMsg::kMethodFieldNumber;
const int HttpMsg::kStatusCodeFieldNumber;
const int HttpMsg::kEncodingFieldNumber;
const int HttpMsg::kUrlFieldNumber;
const int HttpMsg::kHeadersFieldNumber;
const int HttpMsg::kBodyFieldNumber;
const int HttpMsg::kPathFieldNumber;
const int HttpMsg::kIsDecodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpMsg::HttpMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HttpMsg)
}

void HttpMsg::InitAsDefaultInstance() {
}

HttpMsg::HttpMsg(const HttpMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HttpMsg)
}

void HttpMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  http_major_ = 0;
  http_minor_ = 0;
  content_length_ = 0;
  method_ = 0;
  status_code_ = 0;
  encoding_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_decoding_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpMsg::~HttpMsg() {
  // @@protoc_insertion_point(destructor:HttpMsg)
  SharedDtor();
}

void HttpMsg::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HttpMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpMsg_descriptor_;
}

const HttpMsg& HttpMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpMsg* HttpMsg::default_instance_ = NULL;

HttpMsg* HttpMsg::New(::google::protobuf::Arena* arena) const {
  HttpMsg* n = new HttpMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:HttpMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HttpMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HttpMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(type_, status_code_);
    encoding_ = 0;
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3584u) {
    if (has_body()) {
      body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    is_decoding_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HttpMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HttpMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_http_major;
        break;
      }

      // required int32 http_major = 2;
      case 2: {
        if (tag == 16) {
         parse_http_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_major_)));
          set_has_http_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_http_minor;
        break;
      }

      // required int32 http_minor = 3;
      case 3: {
        if (tag == 24) {
         parse_http_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_minor_)));
          set_has_http_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_content_length;
        break;
      }

      // optional int32 content_length = 4;
      case 4: {
        if (tag == 32) {
         parse_content_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_length_)));
          set_has_content_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_method;
        break;
      }

      // optional int32 method = 5;
      case 5: {
        if (tag == 40) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status_code;
        break;
      }

      // optional int32 status_code = 6;
      case 6: {
        if (tag == 48) {
         parse_status_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_encoding;
        break;
      }

      // optional int32 encoding = 7;
      case 7: {
        if (tag == 56) {
         parse_encoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoding_)));
          set_has_encoding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional string url = 8;
      case 8: {
        if (tag == 66) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpMsg.url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_headers;
        break;
      }

      // repeated .HttpMsg.Header headers = 9;
      case 9: {
        if (tag == 74) {
         parse_headers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_headers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_headers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_body;
        break;
      }

      // optional bytes body = 10;
      case 10: {
        if (tag == 82) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_path;
        break;
      }

      // optional string path = 14;
      case 14: {
        if (tag == 114) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HttpMsg.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_decoding;
        break;
      }

      // optional bool is_decoding = 15;
      case 15: {
        if (tag == 120) {
         parse_is_decoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_decoding_)));
          set_has_is_decoding();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HttpMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HttpMsg)
  return false;
#undef DO_
}

void HttpMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HttpMsg)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 http_major = 2;
  if (has_http_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->http_major(), output);
  }

  // required int32 http_minor = 3;
  if (has_http_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->http_minor(), output);
  }

  // optional int32 content_length = 4;
  if (has_content_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->content_length(), output);
  }

  // optional int32 method = 5;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->method(), output);
  }

  // optional int32 status_code = 6;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status_code(), output);
  }

  // optional int32 encoding = 7;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->encoding(), output);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // repeated .HttpMsg.Header headers = 9;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->headers(i), output);
  }

  // optional bytes body = 10;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->body(), output);
  }

  // optional string path = 14;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->path(), output);
  }

  // optional bool is_decoding = 15;
  if (has_is_decoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_decoding(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HttpMsg)
}

::google::protobuf::uint8* HttpMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HttpMsg)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 http_major = 2;
  if (has_http_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->http_major(), target);
  }

  // required int32 http_minor = 3;
  if (has_http_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->http_minor(), target);
  }

  // optional int32 content_length = 4;
  if (has_content_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->content_length(), target);
  }

  // optional int32 method = 5;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->method(), target);
  }

  // optional int32 status_code = 6;
  if (has_status_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status_code(), target);
  }

  // optional int32 encoding = 7;
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->encoding(), target);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // repeated .HttpMsg.Header headers = 9;
  for (unsigned int i = 0, n = this->headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->headers(i), false, target);
  }

  // optional bytes body = 10;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->body(), target);
  }

  // optional string path = 14;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HttpMsg.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->path(), target);
  }

  // optional bool is_decoding = 15;
  if (has_is_decoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_decoding(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HttpMsg)
  return target;
}

int HttpMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HttpMsg)
  int total_size = 0;

  if (has_type()) {
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_http_major()) {
    // required int32 http_major = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_major());
  }

  if (has_http_minor()) {
    // required int32 http_minor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_minor());
  }

  return total_size;
}
int HttpMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:HttpMsg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 http_major = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_major());

    // required int32 http_minor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->http_minor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional int32 content_length = 4;
    if (has_content_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_length());
    }

    // optional int32 method = 5;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

    // optional int32 status_code = 6;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // optional int32 encoding = 7;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoding());
    }

    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[9 / 32] & 3584u) {
    // optional bytes body = 10;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

    // optional string path = 14;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional bool is_decoding = 15;
    if (has_is_decoding()) {
      total_size += 1 + 1;
    }

  }
  // repeated .HttpMsg.Header headers = 9;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HttpMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HttpMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HttpMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HttpMsg)
    MergeFrom(*source);
  }
}

void HttpMsg::MergeFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HttpMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_http_major()) {
      set_http_major(from.http_major());
    }
    if (from.has_http_minor()) {
      set_http_minor(from.http_minor());
    }
    if (from.has_content_length()) {
      set_content_length(from.content_length());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_body()) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_is_decoding()) {
      set_is_decoding(from.is_decoding());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HttpMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpMsg::CopyFrom(const HttpMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HttpMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->headers())) return false;
  return true;
}

void HttpMsg::Swap(HttpMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpMsg::InternalSwap(HttpMsg* other) {
  std::swap(type_, other->type_);
  std::swap(http_major_, other->http_major_);
  std::swap(http_minor_, other->http_minor_);
  std::swap(content_length_, other->content_length_);
  std::swap(method_, other->method_);
  std::swap(status_code_, other->status_code_);
  std::swap(encoding_, other->encoding_);
  url_.Swap(&other->url_);
  headers_.UnsafeArenaSwap(&other->headers_);
  body_.Swap(&other->body_);
  path_.Swap(&other->path_);
  std::swap(is_decoding_, other->is_decoding_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpMsg_descriptor_;
  metadata.reflection = HttpMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpMsg_Header

// required string header_name = 1;
bool HttpMsg_Header::has_header_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HttpMsg_Header::set_has_header_name() {
  _has_bits_[0] |= 0x00000001u;
}
void HttpMsg_Header::clear_has_header_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void HttpMsg_Header::clear_header_name() {
  header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_name();
}
 const ::std::string& HttpMsg_Header::header_name() const {
  // @@protoc_insertion_point(field_get:HttpMsg.Header.header_name)
  return header_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg_Header::set_header_name(const ::std::string& value) {
  set_has_header_name();
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.Header.header_name)
}
 void HttpMsg_Header::set_header_name(const char* value) {
  set_has_header_name();
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.Header.header_name)
}
 void HttpMsg_Header::set_header_name(const char* value, size_t size) {
  set_has_header_name();
  header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.Header.header_name)
}
 ::std::string* HttpMsg_Header::mutable_header_name() {
  set_has_header_name();
  // @@protoc_insertion_point(field_mutable:HttpMsg.Header.header_name)
  return header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpMsg_Header::release_header_name() {
  // @@protoc_insertion_point(field_release:HttpMsg.Header.header_name)
  clear_has_header_name();
  return header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg_Header::set_allocated_header_name(::std::string* header_name) {
  if (header_name != NULL) {
    set_has_header_name();
  } else {
    clear_has_header_name();
  }
  header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_name);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.Header.header_name)
}

// required string header_value = 2;
bool HttpMsg_Header::has_header_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HttpMsg_Header::set_has_header_value() {
  _has_bits_[0] |= 0x00000002u;
}
void HttpMsg_Header::clear_has_header_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void HttpMsg_Header::clear_header_value() {
  header_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_value();
}
 const ::std::string& HttpMsg_Header::header_value() const {
  // @@protoc_insertion_point(field_get:HttpMsg.Header.header_value)
  return header_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg_Header::set_header_value(const ::std::string& value) {
  set_has_header_value();
  header_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.Header.header_value)
}
 void HttpMsg_Header::set_header_value(const char* value) {
  set_has_header_value();
  header_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.Header.header_value)
}
 void HttpMsg_Header::set_header_value(const char* value, size_t size) {
  set_has_header_value();
  header_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.Header.header_value)
}
 ::std::string* HttpMsg_Header::mutable_header_value() {
  set_has_header_value();
  // @@protoc_insertion_point(field_mutable:HttpMsg.Header.header_value)
  return header_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpMsg_Header::release_header_value() {
  // @@protoc_insertion_point(field_release:HttpMsg.Header.header_value)
  clear_has_header_value();
  return header_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg_Header::set_allocated_header_value(::std::string* header_value) {
  if (header_value != NULL) {
    set_has_header_value();
  } else {
    clear_has_header_value();
  }
  header_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_value);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.Header.header_value)
}

// -------------------------------------------------------------------

// HttpMsg

// required int32 type = 1;
bool HttpMsg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HttpMsg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void HttpMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void HttpMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 HttpMsg::type() const {
  // @@protoc_insertion_point(field_get:HttpMsg.type)
  return type_;
}
 void HttpMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.type)
}

// required int32 http_major = 2;
bool HttpMsg::has_http_major() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HttpMsg::set_has_http_major() {
  _has_bits_[0] |= 0x00000002u;
}
void HttpMsg::clear_has_http_major() {
  _has_bits_[0] &= ~0x00000002u;
}
void HttpMsg::clear_http_major() {
  http_major_ = 0;
  clear_has_http_major();
}
 ::google::protobuf::int32 HttpMsg::http_major() const {
  // @@protoc_insertion_point(field_get:HttpMsg.http_major)
  return http_major_;
}
 void HttpMsg::set_http_major(::google::protobuf::int32 value) {
  set_has_http_major();
  http_major_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.http_major)
}

// required int32 http_minor = 3;
bool HttpMsg::has_http_minor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HttpMsg::set_has_http_minor() {
  _has_bits_[0] |= 0x00000004u;
}
void HttpMsg::clear_has_http_minor() {
  _has_bits_[0] &= ~0x00000004u;
}
void HttpMsg::clear_http_minor() {
  http_minor_ = 0;
  clear_has_http_minor();
}
 ::google::protobuf::int32 HttpMsg::http_minor() const {
  // @@protoc_insertion_point(field_get:HttpMsg.http_minor)
  return http_minor_;
}
 void HttpMsg::set_http_minor(::google::protobuf::int32 value) {
  set_has_http_minor();
  http_minor_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.http_minor)
}

// optional int32 content_length = 4;
bool HttpMsg::has_content_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HttpMsg::set_has_content_length() {
  _has_bits_[0] |= 0x00000008u;
}
void HttpMsg::clear_has_content_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void HttpMsg::clear_content_length() {
  content_length_ = 0;
  clear_has_content_length();
}
 ::google::protobuf::int32 HttpMsg::content_length() const {
  // @@protoc_insertion_point(field_get:HttpMsg.content_length)
  return content_length_;
}
 void HttpMsg::set_content_length(::google::protobuf::int32 value) {
  set_has_content_length();
  content_length_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.content_length)
}

// optional int32 method = 5;
bool HttpMsg::has_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HttpMsg::set_has_method() {
  _has_bits_[0] |= 0x00000010u;
}
void HttpMsg::clear_has_method() {
  _has_bits_[0] &= ~0x00000010u;
}
void HttpMsg::clear_method() {
  method_ = 0;
  clear_has_method();
}
 ::google::protobuf::int32 HttpMsg::method() const {
  // @@protoc_insertion_point(field_get:HttpMsg.method)
  return method_;
}
 void HttpMsg::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.method)
}

// optional int32 status_code = 6;
bool HttpMsg::has_status_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HttpMsg::set_has_status_code() {
  _has_bits_[0] |= 0x00000020u;
}
void HttpMsg::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000020u;
}
void HttpMsg::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
 ::google::protobuf::int32 HttpMsg::status_code() const {
  // @@protoc_insertion_point(field_get:HttpMsg.status_code)
  return status_code_;
}
 void HttpMsg::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.status_code)
}

// optional int32 encoding = 7;
bool HttpMsg::has_encoding() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HttpMsg::set_has_encoding() {
  _has_bits_[0] |= 0x00000040u;
}
void HttpMsg::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000040u;
}
void HttpMsg::clear_encoding() {
  encoding_ = 0;
  clear_has_encoding();
}
 ::google::protobuf::int32 HttpMsg::encoding() const {
  // @@protoc_insertion_point(field_get:HttpMsg.encoding)
  return encoding_;
}
 void HttpMsg::set_encoding(::google::protobuf::int32 value) {
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.encoding)
}

// optional string url = 8;
bool HttpMsg::has_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HttpMsg::set_has_url() {
  _has_bits_[0] |= 0x00000080u;
}
void HttpMsg::clear_has_url() {
  _has_bits_[0] &= ~0x00000080u;
}
void HttpMsg::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& HttpMsg::url() const {
  // @@protoc_insertion_point(field_get:HttpMsg.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.url)
}
 void HttpMsg::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.url)
}
 void HttpMsg::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.url)
}
 ::std::string* HttpMsg::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:HttpMsg.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpMsg::release_url() {
  // @@protoc_insertion_point(field_release:HttpMsg.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.url)
}

// repeated .HttpMsg.Header headers = 9;
int HttpMsg::headers_size() const {
  return headers_.size();
}
void HttpMsg::clear_headers() {
  headers_.Clear();
}
const ::HttpMsg_Header& HttpMsg::headers(int index) const {
  // @@protoc_insertion_point(field_get:HttpMsg.headers)
  return headers_.Get(index);
}
::HttpMsg_Header* HttpMsg::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:HttpMsg.headers)
  return headers_.Mutable(index);
}
::HttpMsg_Header* HttpMsg::add_headers() {
  // @@protoc_insertion_point(field_add:HttpMsg.headers)
  return headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::HttpMsg_Header >*
HttpMsg::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:HttpMsg.headers)
  return &headers_;
}
const ::google::protobuf::RepeatedPtrField< ::HttpMsg_Header >&
HttpMsg::headers() const {
  // @@protoc_insertion_point(field_list:HttpMsg.headers)
  return headers_;
}

// optional bytes body = 10;
bool HttpMsg::has_body() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void HttpMsg::set_has_body() {
  _has_bits_[0] |= 0x00000200u;
}
void HttpMsg::clear_has_body() {
  _has_bits_[0] &= ~0x00000200u;
}
void HttpMsg::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
 const ::std::string& HttpMsg::body() const {
  // @@protoc_insertion_point(field_get:HttpMsg.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.body)
}
 void HttpMsg::set_body(const char* value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.body)
}
 void HttpMsg::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.body)
}
 ::std::string* HttpMsg::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:HttpMsg.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpMsg::release_body() {
  // @@protoc_insertion_point(field_release:HttpMsg.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.body)
}

// optional string path = 14;
bool HttpMsg::has_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void HttpMsg::set_has_path() {
  _has_bits_[0] |= 0x00000400u;
}
void HttpMsg::clear_has_path() {
  _has_bits_[0] &= ~0x00000400u;
}
void HttpMsg::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& HttpMsg::path() const {
  // @@protoc_insertion_point(field_get:HttpMsg.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HttpMsg.path)
}
 void HttpMsg::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HttpMsg.path)
}
 void HttpMsg::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HttpMsg.path)
}
 ::std::string* HttpMsg::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:HttpMsg.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpMsg::release_path() {
  // @@protoc_insertion_point(field_release:HttpMsg.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpMsg::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:HttpMsg.path)
}

// optional bool is_decoding = 15;
bool HttpMsg::has_is_decoding() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void HttpMsg::set_has_is_decoding() {
  _has_bits_[0] |= 0x00000800u;
}
void HttpMsg::clear_has_is_decoding() {
  _has_bits_[0] &= ~0x00000800u;
}
void HttpMsg::clear_is_decoding() {
  is_decoding_ = false;
  clear_has_is_decoding();
}
 bool HttpMsg::is_decoding() const {
  // @@protoc_insertion_point(field_get:HttpMsg.is_decoding)
  return is_decoding_;
}
 void HttpMsg::set_is_decoding(bool value) {
  set_has_is_decoding();
  is_decoding_ = value;
  // @@protoc_insertion_point(field_set:HttpMsg.is_decoding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
