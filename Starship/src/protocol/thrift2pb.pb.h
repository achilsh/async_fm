// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thrift2pb.proto

#ifndef PROTOBUF_thrift2pb_2eproto__INCLUDED
#define PROTOBUF_thrift2pb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_thrift2pb_2eproto();
void protobuf_AssignDesc_thrift2pb_2eproto();
void protobuf_ShutdownFile_thrift2pb_2eproto();

class Thrift2Pb;

// ===================================================================

class Thrift2Pb : public ::google::protobuf::Message {
 public:
  Thrift2Pb();
  virtual ~Thrift2Pb();

  Thrift2Pb(const Thrift2Pb& from);

  inline Thrift2Pb& operator=(const Thrift2Pb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Thrift2Pb& default_instance();

  void Swap(Thrift2Pb* other);

  // implements Message ----------------------------------------------

  Thrift2Pb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Thrift2Pb& from);
  void MergeFrom(const Thrift2Pb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string thrift_interface_name = 1;
  inline bool has_thrift_interface_name() const;
  inline void clear_thrift_interface_name();
  static const int kThriftInterfaceNameFieldNumber = 1;
  inline const ::std::string& thrift_interface_name() const;
  inline void set_thrift_interface_name(const ::std::string& value);
  inline void set_thrift_interface_name(const char* value);
  inline void set_thrift_interface_name(const char* value, size_t size);
  inline ::std::string* mutable_thrift_interface_name();
  inline ::std::string* release_thrift_interface_name();
  inline void set_allocated_thrift_interface_name(::std::string* thrift_interface_name);

  // required int32 thrift_seq = 2;
  inline bool has_thrift_seq() const;
  inline void clear_thrift_seq();
  static const int kThriftSeqFieldNumber = 2;
  inline ::google::protobuf::int32 thrift_seq() const;
  inline void set_thrift_seq(::google::protobuf::int32 value);

  // optional bytes thrift_req_params = 3;
  inline bool has_thrift_req_params() const;
  inline void clear_thrift_req_params();
  static const int kThriftReqParamsFieldNumber = 3;
  inline const ::std::string& thrift_req_params() const;
  inline void set_thrift_req_params(const ::std::string& value);
  inline void set_thrift_req_params(const char* value);
  inline void set_thrift_req_params(const void* value, size_t size);
  inline ::std::string* mutable_thrift_req_params();
  inline ::std::string* release_thrift_req_params();
  inline void set_allocated_thrift_req_params(::std::string* thrift_req_params);

  // optional bytes thrift_rsp_params = 4;
  inline bool has_thrift_rsp_params() const;
  inline void clear_thrift_rsp_params();
  static const int kThriftRspParamsFieldNumber = 4;
  inline const ::std::string& thrift_rsp_params() const;
  inline void set_thrift_rsp_params(const ::std::string& value);
  inline void set_thrift_rsp_params(const char* value);
  inline void set_thrift_rsp_params(const void* value, size_t size);
  inline ::std::string* mutable_thrift_rsp_params();
  inline ::std::string* release_thrift_rsp_params();
  inline void set_allocated_thrift_rsp_params(::std::string* thrift_rsp_params);

  // @@protoc_insertion_point(class_scope:Thrift2Pb)
 private:
  inline void set_has_thrift_interface_name();
  inline void clear_has_thrift_interface_name();
  inline void set_has_thrift_seq();
  inline void clear_has_thrift_seq();
  inline void set_has_thrift_req_params();
  inline void clear_has_thrift_req_params();
  inline void set_has_thrift_rsp_params();
  inline void clear_has_thrift_rsp_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* thrift_interface_name_;
  ::std::string* thrift_req_params_;
  ::std::string* thrift_rsp_params_;
  ::google::protobuf::int32 thrift_seq_;
  friend void  protobuf_AddDesc_thrift2pb_2eproto();
  friend void protobuf_AssignDesc_thrift2pb_2eproto();
  friend void protobuf_ShutdownFile_thrift2pb_2eproto();

  void InitAsDefaultInstance();
  static Thrift2Pb* default_instance_;
};
// ===================================================================


// ===================================================================

// Thrift2Pb

// required string thrift_interface_name = 1;
inline bool Thrift2Pb::has_thrift_interface_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Thrift2Pb::set_has_thrift_interface_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Thrift2Pb::clear_has_thrift_interface_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Thrift2Pb::clear_thrift_interface_name() {
  if (thrift_interface_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_interface_name_->clear();
  }
  clear_has_thrift_interface_name();
}
inline const ::std::string& Thrift2Pb::thrift_interface_name() const {
  // @@protoc_insertion_point(field_get:Thrift2Pb.thrift_interface_name)
  return *thrift_interface_name_;
}
inline void Thrift2Pb::set_thrift_interface_name(const ::std::string& value) {
  set_has_thrift_interface_name();
  if (thrift_interface_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_interface_name_ = new ::std::string;
  }
  thrift_interface_name_->assign(value);
  // @@protoc_insertion_point(field_set:Thrift2Pb.thrift_interface_name)
}
inline void Thrift2Pb::set_thrift_interface_name(const char* value) {
  set_has_thrift_interface_name();
  if (thrift_interface_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_interface_name_ = new ::std::string;
  }
  thrift_interface_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Thrift2Pb.thrift_interface_name)
}
inline void Thrift2Pb::set_thrift_interface_name(const char* value, size_t size) {
  set_has_thrift_interface_name();
  if (thrift_interface_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_interface_name_ = new ::std::string;
  }
  thrift_interface_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Thrift2Pb.thrift_interface_name)
}
inline ::std::string* Thrift2Pb::mutable_thrift_interface_name() {
  set_has_thrift_interface_name();
  if (thrift_interface_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_interface_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Thrift2Pb.thrift_interface_name)
  return thrift_interface_name_;
}
inline ::std::string* Thrift2Pb::release_thrift_interface_name() {
  clear_has_thrift_interface_name();
  if (thrift_interface_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thrift_interface_name_;
    thrift_interface_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Thrift2Pb::set_allocated_thrift_interface_name(::std::string* thrift_interface_name) {
  if (thrift_interface_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thrift_interface_name_;
  }
  if (thrift_interface_name) {
    set_has_thrift_interface_name();
    thrift_interface_name_ = thrift_interface_name;
  } else {
    clear_has_thrift_interface_name();
    thrift_interface_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Thrift2Pb.thrift_interface_name)
}

// required int32 thrift_seq = 2;
inline bool Thrift2Pb::has_thrift_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Thrift2Pb::set_has_thrift_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Thrift2Pb::clear_has_thrift_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Thrift2Pb::clear_thrift_seq() {
  thrift_seq_ = 0;
  clear_has_thrift_seq();
}
inline ::google::protobuf::int32 Thrift2Pb::thrift_seq() const {
  // @@protoc_insertion_point(field_get:Thrift2Pb.thrift_seq)
  return thrift_seq_;
}
inline void Thrift2Pb::set_thrift_seq(::google::protobuf::int32 value) {
  set_has_thrift_seq();
  thrift_seq_ = value;
  // @@protoc_insertion_point(field_set:Thrift2Pb.thrift_seq)
}

// optional bytes thrift_req_params = 3;
inline bool Thrift2Pb::has_thrift_req_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Thrift2Pb::set_has_thrift_req_params() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Thrift2Pb::clear_has_thrift_req_params() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Thrift2Pb::clear_thrift_req_params() {
  if (thrift_req_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_req_params_->clear();
  }
  clear_has_thrift_req_params();
}
inline const ::std::string& Thrift2Pb::thrift_req_params() const {
  // @@protoc_insertion_point(field_get:Thrift2Pb.thrift_req_params)
  return *thrift_req_params_;
}
inline void Thrift2Pb::set_thrift_req_params(const ::std::string& value) {
  set_has_thrift_req_params();
  if (thrift_req_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_req_params_ = new ::std::string;
  }
  thrift_req_params_->assign(value);
  // @@protoc_insertion_point(field_set:Thrift2Pb.thrift_req_params)
}
inline void Thrift2Pb::set_thrift_req_params(const char* value) {
  set_has_thrift_req_params();
  if (thrift_req_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_req_params_ = new ::std::string;
  }
  thrift_req_params_->assign(value);
  // @@protoc_insertion_point(field_set_char:Thrift2Pb.thrift_req_params)
}
inline void Thrift2Pb::set_thrift_req_params(const void* value, size_t size) {
  set_has_thrift_req_params();
  if (thrift_req_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_req_params_ = new ::std::string;
  }
  thrift_req_params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Thrift2Pb.thrift_req_params)
}
inline ::std::string* Thrift2Pb::mutable_thrift_req_params() {
  set_has_thrift_req_params();
  if (thrift_req_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_req_params_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Thrift2Pb.thrift_req_params)
  return thrift_req_params_;
}
inline ::std::string* Thrift2Pb::release_thrift_req_params() {
  clear_has_thrift_req_params();
  if (thrift_req_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thrift_req_params_;
    thrift_req_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Thrift2Pb::set_allocated_thrift_req_params(::std::string* thrift_req_params) {
  if (thrift_req_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thrift_req_params_;
  }
  if (thrift_req_params) {
    set_has_thrift_req_params();
    thrift_req_params_ = thrift_req_params;
  } else {
    clear_has_thrift_req_params();
    thrift_req_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Thrift2Pb.thrift_req_params)
}

// optional bytes thrift_rsp_params = 4;
inline bool Thrift2Pb::has_thrift_rsp_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Thrift2Pb::set_has_thrift_rsp_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Thrift2Pb::clear_has_thrift_rsp_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Thrift2Pb::clear_thrift_rsp_params() {
  if (thrift_rsp_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_rsp_params_->clear();
  }
  clear_has_thrift_rsp_params();
}
inline const ::std::string& Thrift2Pb::thrift_rsp_params() const {
  // @@protoc_insertion_point(field_get:Thrift2Pb.thrift_rsp_params)
  return *thrift_rsp_params_;
}
inline void Thrift2Pb::set_thrift_rsp_params(const ::std::string& value) {
  set_has_thrift_rsp_params();
  if (thrift_rsp_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_rsp_params_ = new ::std::string;
  }
  thrift_rsp_params_->assign(value);
  // @@protoc_insertion_point(field_set:Thrift2Pb.thrift_rsp_params)
}
inline void Thrift2Pb::set_thrift_rsp_params(const char* value) {
  set_has_thrift_rsp_params();
  if (thrift_rsp_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_rsp_params_ = new ::std::string;
  }
  thrift_rsp_params_->assign(value);
  // @@protoc_insertion_point(field_set_char:Thrift2Pb.thrift_rsp_params)
}
inline void Thrift2Pb::set_thrift_rsp_params(const void* value, size_t size) {
  set_has_thrift_rsp_params();
  if (thrift_rsp_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_rsp_params_ = new ::std::string;
  }
  thrift_rsp_params_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Thrift2Pb.thrift_rsp_params)
}
inline ::std::string* Thrift2Pb::mutable_thrift_rsp_params() {
  set_has_thrift_rsp_params();
  if (thrift_rsp_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thrift_rsp_params_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Thrift2Pb.thrift_rsp_params)
  return thrift_rsp_params_;
}
inline ::std::string* Thrift2Pb::release_thrift_rsp_params() {
  clear_has_thrift_rsp_params();
  if (thrift_rsp_params_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thrift_rsp_params_;
    thrift_rsp_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Thrift2Pb::set_allocated_thrift_rsp_params(::std::string* thrift_rsp_params) {
  if (thrift_rsp_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thrift_rsp_params_;
  }
  if (thrift_rsp_params) {
    set_has_thrift_rsp_params();
    thrift_rsp_params_ = thrift_rsp_params;
  } else {
    clear_has_thrift_rsp_params();
    thrift_rsp_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Thrift2Pb.thrift_rsp_params)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_thrift2pb_2eproto__INCLUDED
