// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thrift2pb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "thrift2pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Thrift2Pb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Thrift2Pb_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_thrift2pb_2eproto() {
  protobuf_AddDesc_thrift2pb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "thrift2pb.proto");
  GOOGLE_CHECK(file != NULL);
  Thrift2Pb_descriptor_ = file->message_type(0);
  static const int Thrift2Pb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thrift2Pb, thrift_interface_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thrift2Pb, thrift_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thrift2Pb, thrift_req_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thrift2Pb, thrift_rsp_params_),
  };
  Thrift2Pb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Thrift2Pb_descriptor_,
      Thrift2Pb::default_instance_,
      Thrift2Pb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thrift2Pb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thrift2Pb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Thrift2Pb));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_thrift2pb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Thrift2Pb_descriptor_, &Thrift2Pb::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_thrift2pb_2eproto() {
  delete Thrift2Pb::default_instance_;
  delete Thrift2Pb_reflection_;
}

void protobuf_AddDesc_thrift2pb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017thrift2pb.proto\"t\n\tThrift2Pb\022\035\n\025thrift"
    "_interface_name\030\001 \002(\t\022\022\n\nthrift_seq\030\002 \002("
    "\005\022\031\n\021thrift_req_params\030\003 \001(\014\022\031\n\021thrift_r"
    "sp_params\030\004 \001(\014", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "thrift2pb.proto", &protobuf_RegisterTypes);
  Thrift2Pb::default_instance_ = new Thrift2Pb();
  Thrift2Pb::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_thrift2pb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_thrift2pb_2eproto {
  StaticDescriptorInitializer_thrift2pb_2eproto() {
    protobuf_AddDesc_thrift2pb_2eproto();
  }
} static_descriptor_initializer_thrift2pb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Thrift2Pb::kThriftInterfaceNameFieldNumber;
const int Thrift2Pb::kThriftSeqFieldNumber;
const int Thrift2Pb::kThriftReqParamsFieldNumber;
const int Thrift2Pb::kThriftRspParamsFieldNumber;
#endif  // !_MSC_VER

Thrift2Pb::Thrift2Pb()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Thrift2Pb)
}

void Thrift2Pb::InitAsDefaultInstance() {
}

Thrift2Pb::Thrift2Pb(const Thrift2Pb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Thrift2Pb)
}

void Thrift2Pb::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thrift_interface_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thrift_seq_ = 0;
  thrift_req_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thrift_rsp_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Thrift2Pb::~Thrift2Pb() {
  // @@protoc_insertion_point(destructor:Thrift2Pb)
  SharedDtor();
}

void Thrift2Pb::SharedDtor() {
  if (thrift_interface_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thrift_interface_name_;
  }
  if (thrift_req_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thrift_req_params_;
  }
  if (thrift_rsp_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thrift_rsp_params_;
  }
  if (this != default_instance_) {
  }
}

void Thrift2Pb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Thrift2Pb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Thrift2Pb_descriptor_;
}

const Thrift2Pb& Thrift2Pb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thrift2pb_2eproto();
  return *default_instance_;
}

Thrift2Pb* Thrift2Pb::default_instance_ = NULL;

Thrift2Pb* Thrift2Pb::New() const {
  return new Thrift2Pb;
}

void Thrift2Pb::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_thrift_interface_name()) {
      if (thrift_interface_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thrift_interface_name_->clear();
      }
    }
    thrift_seq_ = 0;
    if (has_thrift_req_params()) {
      if (thrift_req_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thrift_req_params_->clear();
      }
    }
    if (has_thrift_rsp_params()) {
      if (thrift_rsp_params_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thrift_rsp_params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Thrift2Pb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Thrift2Pb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string thrift_interface_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thrift_interface_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thrift_interface_name().data(), this->thrift_interface_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thrift_interface_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_thrift_seq;
        break;
      }

      // required int32 thrift_seq = 2;
      case 2: {
        if (tag == 16) {
         parse_thrift_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thrift_seq_)));
          set_has_thrift_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_thrift_req_params;
        break;
      }

      // optional bytes thrift_req_params = 3;
      case 3: {
        if (tag == 26) {
         parse_thrift_req_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thrift_req_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_thrift_rsp_params;
        break;
      }

      // optional bytes thrift_rsp_params = 4;
      case 4: {
        if (tag == 34) {
         parse_thrift_rsp_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thrift_rsp_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Thrift2Pb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Thrift2Pb)
  return false;
#undef DO_
}

void Thrift2Pb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Thrift2Pb)
  // required string thrift_interface_name = 1;
  if (has_thrift_interface_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thrift_interface_name().data(), this->thrift_interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thrift_interface_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->thrift_interface_name(), output);
  }

  // required int32 thrift_seq = 2;
  if (has_thrift_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thrift_seq(), output);
  }

  // optional bytes thrift_req_params = 3;
  if (has_thrift_req_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->thrift_req_params(), output);
  }

  // optional bytes thrift_rsp_params = 4;
  if (has_thrift_rsp_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->thrift_rsp_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Thrift2Pb)
}

::google::protobuf::uint8* Thrift2Pb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Thrift2Pb)
  // required string thrift_interface_name = 1;
  if (has_thrift_interface_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thrift_interface_name().data(), this->thrift_interface_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thrift_interface_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->thrift_interface_name(), target);
  }

  // required int32 thrift_seq = 2;
  if (has_thrift_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thrift_seq(), target);
  }

  // optional bytes thrift_req_params = 3;
  if (has_thrift_req_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->thrift_req_params(), target);
  }

  // optional bytes thrift_rsp_params = 4;
  if (has_thrift_rsp_params()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->thrift_rsp_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Thrift2Pb)
  return target;
}

int Thrift2Pb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string thrift_interface_name = 1;
    if (has_thrift_interface_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thrift_interface_name());
    }

    // required int32 thrift_seq = 2;
    if (has_thrift_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thrift_seq());
    }

    // optional bytes thrift_req_params = 3;
    if (has_thrift_req_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thrift_req_params());
    }

    // optional bytes thrift_rsp_params = 4;
    if (has_thrift_rsp_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thrift_rsp_params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Thrift2Pb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Thrift2Pb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Thrift2Pb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Thrift2Pb::MergeFrom(const Thrift2Pb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thrift_interface_name()) {
      set_thrift_interface_name(from.thrift_interface_name());
    }
    if (from.has_thrift_seq()) {
      set_thrift_seq(from.thrift_seq());
    }
    if (from.has_thrift_req_params()) {
      set_thrift_req_params(from.thrift_req_params());
    }
    if (from.has_thrift_rsp_params()) {
      set_thrift_rsp_params(from.thrift_rsp_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Thrift2Pb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thrift2Pb::CopyFrom(const Thrift2Pb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thrift2Pb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Thrift2Pb::Swap(Thrift2Pb* other) {
  if (other != this) {
    std::swap(thrift_interface_name_, other->thrift_interface_name_);
    std::swap(thrift_seq_, other->thrift_seq_);
    std::swap(thrift_req_params_, other->thrift_req_params_);
    std::swap(thrift_rsp_params_, other->thrift_rsp_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Thrift2Pb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Thrift2Pb_descriptor_;
  metadata.reflection = Thrift2Pb_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
