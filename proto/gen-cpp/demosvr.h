/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef demosvr_H
#define demosvr_H

#include <thrift/TDispatchProcessor.h>
#include "interface_test_types.h"

namespace Test {

class demosvrIf {
 public:
  virtual ~demosvrIf() {}
  virtual void pingping(pang& _return, const ping& pi, const int32_t iparam, const std::string& sparam) = 0;
};

class demosvrIfFactory {
 public:
  typedef demosvrIf Handler;

  virtual ~demosvrIfFactory() {}

  virtual demosvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(demosvrIf* /* handler */) = 0;
};

class demosvrIfSingletonFactory : virtual public demosvrIfFactory {
 public:
  demosvrIfSingletonFactory(const boost::shared_ptr<demosvrIf>& iface) : iface_(iface) {}
  virtual ~demosvrIfSingletonFactory() {}

  virtual demosvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(demosvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<demosvrIf> iface_;
};

class demosvrNull : virtual public demosvrIf {
 public:
  virtual ~demosvrNull() {}
  void pingping(pang& /* _return */, const ping& /* pi */, const int32_t /* iparam */, const std::string& /* sparam */) {
    return;
  }
};

typedef struct _demosvr_pingping_args__isset {
  _demosvr_pingping_args__isset() : pi(false), iparam(false), sparam(false) {}
  bool pi;
  bool iparam;
  bool sparam;
} _demosvr_pingping_args__isset;

class demosvr_pingping_args {
 public:

  demosvr_pingping_args() : iparam(0), sparam() {
  }

  virtual ~demosvr_pingping_args() throw() {}

  ping pi;
  int32_t iparam;
  std::string sparam;

  _demosvr_pingping_args__isset __isset;

  void __set_pi(const ping& val) {
    pi = val;
  }

  void __set_iparam(const int32_t val) {
    iparam = val;
  }

  void __set_sparam(const std::string& val) {
    sparam = val;
  }

  bool operator == (const demosvr_pingping_args & rhs) const
  {
    if (!(pi == rhs.pi))
      return false;
    if (!(iparam == rhs.iparam))
      return false;
    if (!(sparam == rhs.sparam))
      return false;
    return true;
  }
  bool operator != (const demosvr_pingping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const demosvr_pingping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class demosvr_pingping_pargs {
 public:


  virtual ~demosvr_pingping_pargs() throw() {}

  const ping* pi;
  const int32_t* iparam;
  const std::string* sparam;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _demosvr_pingping_result__isset {
  _demosvr_pingping_result__isset() : success(false) {}
  bool success;
} _demosvr_pingping_result__isset;

class demosvr_pingping_result {
 public:

  demosvr_pingping_result() {
  }

  virtual ~demosvr_pingping_result() throw() {}

  pang success;

  _demosvr_pingping_result__isset __isset;

  void __set_success(const pang& val) {
    success = val;
  }

  bool operator == (const demosvr_pingping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const demosvr_pingping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const demosvr_pingping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _demosvr_pingping_presult__isset {
  _demosvr_pingping_presult__isset() : success(false) {}
  bool success;
} _demosvr_pingping_presult__isset;

class demosvr_pingping_presult {
 public:


  virtual ~demosvr_pingping_presult() throw() {}

  pang* success;

  _demosvr_pingping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class demosvrClient : virtual public demosvrIf {
 public:
  demosvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  demosvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pingping(pang& _return, const ping& pi, const int32_t iparam, const std::string& sparam);
  void send_pingping(const ping& pi, const int32_t iparam, const std::string& sparam);
  void recv_pingping(pang& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class demosvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<demosvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (demosvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_pingping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  demosvrProcessor(boost::shared_ptr<demosvrIf> iface) :
    iface_(iface) {
    processMap_["pingping"] = &demosvrProcessor::process_pingping;
  }

  virtual ~demosvrProcessor() {}
};

class demosvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  demosvrProcessorFactory(const ::boost::shared_ptr< demosvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< demosvrIfFactory > handlerFactory_;
};

class demosvrMultiface : virtual public demosvrIf {
 public:
  demosvrMultiface(std::vector<boost::shared_ptr<demosvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~demosvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<demosvrIf> > ifaces_;
  demosvrMultiface() {}
  void add(boost::shared_ptr<demosvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void pingping(pang& _return, const ping& pi, const int32_t iparam, const std::string& sparam) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pingping(_return, pi, iparam, sparam);
    }
    ifaces_[i]->pingping(_return, pi, iparam, sparam);
    return;
  }

};

} // namespace

#endif
