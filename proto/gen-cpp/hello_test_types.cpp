/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "hello_test_types.h"

#include <algorithm>

namespace Test {

const char* OneTest::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t OneTest::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t OneTest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_fOne = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fOne);
          isset_fOne = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fSecond);
          this->__isset.fSecond = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_fOne)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t OneTest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OneTest");

  xfer += oprot->writeFieldBegin("fOne", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->fOne);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.fSecond) {
    xfer += oprot->writeFieldBegin("fSecond", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->fSecond);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OneTest &a, OneTest &b) {
  using ::std::swap;
  swap(a.fOne, b.fOne);
  swap(a.fSecond, b.fSecond);
  swap(a.__isset, b.__isset);
}

} // namespace
