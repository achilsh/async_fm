/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hello_test_TYPES_H
#define hello_test_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Test {

typedef struct _OneTest__isset {
  _OneTest__isset() : fSecond(false) {}
  bool fSecond;
} _OneTest__isset;

class OneTest {
 public:

  static const char* ascii_fingerprint; // = "5B708A954C550ECA9C1A49D3C5CAFAB9";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

  OneTest() : fOne(), fSecond() {
  }

  virtual ~OneTest() throw() {}

  std::string fOne;
  std::string fSecond;

  _OneTest__isset __isset;

  void __set_fOne(const std::string& val) {
    fOne = val;
  }

  void __set_fSecond(const std::string& val) {
    fSecond = val;
    __isset.fSecond = true;
  }

  bool operator == (const OneTest & rhs) const
  {
    if (!(fOne == rhs.fOne))
      return false;
    if (__isset.fSecond != rhs.__isset.fSecond)
      return false;
    else if (__isset.fSecond && !(fSecond == rhs.fSecond))
      return false;
    return true;
  }
  bool operator != (const OneTest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OneTest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OneTest &a, OneTest &b);

} // namespace

#endif
